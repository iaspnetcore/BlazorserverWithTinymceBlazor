@{
    ViewData["Title"] = "Home Page";
}


@section header
    {
    <!--下载的tinyMCE-->
    <script src="/lib/tinymce_5.1.6/js/tinymce/tinymce.min.js"></script>

    <script src="https://unpkg.com/vue@2.5.13/dist/vue.js"></script>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="/Index">building Index+vue2</a>.</p>
</div>



<div id="tinymcedemo">

    <div>
        <p>FullName: {{ firstName }}</p>
        <p>FirstName: <input type="text" v-model="firstName"></p>
    </div>


</div>

<button onclick="content()">Get content</button>

<div>
    <p>这里是生成的最终HTML</p>
</div>
<textarea id="html-content" cols="30" rows="10" v-model="html"></textarea>

{{html}}




@* come from :https://juejin.cn/post/7133392287463112735*@

<script>
    var app = new Vue({
        el: '#tinymcedemo',

        data: {
            text: "",
            html: "777",
            iframeDocument: null,

            firstName: 'Dawei',
            lastName: 'Lou',
            fullName: ''
        },




        create: function () {

            // this.ifr = this.$el.iframe.contentWindow

            //console.log('1.ifr', ifr); //run ok

        },

        created: function () {

            // 页面加载时判断frameObj是否加载


            window.onload = () => {
                // do something

                let ifr = document.querySelector("iframe");

                console.log('1.ifr', ifr); //run ok




                console.log('2.ifr', ifr.contentDocument);   //获取#document 即html  runok


                const iframeDoc1 = ifr.contentDocument.querySelector('#tinymce');

                console.log('3.ifr', iframeDoc1);

                // ifr.contentDocument 获取的是iframe中的document
                let ddd = ifr.contentDocument.querySelector('#tinymce');


                const iframeDoc = ifr.contentDocument.querySelector('#tinymce');

                const iframeDocument = ifr.contentDocument.querySelector('#tinymce');

                console.log('ddd', ddd);

            }

        },






        // https://dustinpfister.github.io/2019/11/11/vuejs-lifecycle-updated/
        //
        updated: function () {


            //只有data里的变量改变并且要在页面重新渲染完成之后,才会进updated生命周期，只改变data里的值但是没有再页面上渲染该值的话并不会触发updated方法。

            console.log('updated')

            console.log('updated', this.iframeDocument)

            // 配置观察选项
            const config = {
                // 观察 attributes 改变
                attributes: true,
                // 指定观察属性
                attributeFilter: ['id'],
                // 观察节点增删
                childList: true,
                // 观察文本改变
                characterData: true,
                // 观察子节点树
                subtree: true
            }

            // 关闭观察器
            this.observer.disconnect()
            // 观察节点变化
            this.observer.observe(this.iframeDocument, config)

            //作者：MZL
            //链接：https://juejin.cn/post/6868554933365374989
            //来源：稀土掘金
            //著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。





        },

        //https://juejin.cn/post/6844903600737484808
        //watch的代码的效果是，当我们输入firstName后，wacth监听每次修改变化的新值，然后计算输出fullName
        watch: {


            firstName(newName, oldName) {
                this.fullName = newName + ' ' + this.lastName;
            }
        },


        //Vue尚完成挂载
        mounted() {
            this.init();
            // this.mutationObserverInstall();
            //this.iframeDocument();





        },
        //ready: function () {
        //    this.getCustomers()
        //},

        // 监听text变量


        //        作者：jc_FREE
        //链接：https://juejin.cn/post/6844903716038901774
        //            来源：稀土掘金
        //著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。




        methods: {
            init() {
                window.tinymce.init({
                    selector: "#tinymcedemo",
                    plugins: 'toc',
                    toolbar: 'toc |  formatselect',
                })
            },

            // 生成唯一的数字
            generateUniqueNumber: function () {
                var num = 0
                return function () {
                    num += 1
                    return num
                }
            },

            showData: function () {
                var _self = this;
                $.ajax({
                    type: 'POST',
                    url: '/EmailAccount/List',
                    success: function (data) {
                        _self.message = JSON.stringify(data);
                        _self.message2 = data.data;
                        _self.loaded = true;
                    }
                });
            },

            // 获取iframe的Document 对象

            //监听dom节点变化函数
            // 创建观察器


            //mutationObserverInstall: function () {

            //    const list = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6']
            //    let catalogList = []

            //    this.observer = new MutationObserver((mutations) => {
            //        mutations.forEach((mutation: any) => {
            //            // console.log('mutation', mutation)
            //            // 过滤出 h1-h6
            //            const childrens = _.filter(mutation.target.children, item => _.includes(list, item.nodeName))
            //            // 移除 h1-h6 中的一个
            //            const removedNodes = _.some(mutation.removedNodes, item => _.includes(list, item.nodeName))

            //            // childrens.length > 1 ,此时会全量更新h1-h6的节点
            //            if (!_.isEmpty(mutation.addedNodes) && !_.isEmpty(childrens)) {
            //                // 先清空
            //                catalogList = []
            //                console.log('childrens', childrens)

            //                // 给元素添加自定义属性
            //                _.forEach(childrens, child => {
            //                    const foundName = _.find(child.attributes, { name: 'catalogname' })

            //                    // 未添加自定义属性的目录
            //                    if (!foundName) {
            //                        const name = `catalog_${this.catalogUniqueNumber()}`
            //                        child.setAttribute('catalogName', name)

            //                        catalogList.push({
            //                            catalogName: name,
            //                            nodeName: child.nodeName,
            //                            innerHTML: child.innerHTML,
            //                        })
            //                    }
            //                    // 已经添加了自定义属性
            //                    else {
            //                        catalogList.push({
            //                            catalogName: foundName.value,
            //                            nodeName: child.nodeName,
            //                            innerHTML: child.innerHTML,
            //                        })
            //                    }
            //                })

            //                this.$emit('showCatalog', catalogList)
            //            }

            //            // childrens.length = 0 , 检查到全文中没有h1-h6, 则清空目录列表
            //            if (removedNodes && _.isEmpty(childrens)) {
            //                const catalogs = this.iframeDocument.querySelectorAll('h1,h2,h3,h4,h5,h6')

            //                // 清空目录列表
            //                if (_.isEmpty(catalogs)) this.$emit('showCatalog', [])
            //            }
            //        })
            //    })

            //    //作者：MZL
            //    //链接：https://juejin.cn/post/6868554933365374989
            //    //来源：稀土掘金
            //    //著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

            //},

        }

    })
</script>

@*JavaScript 获取 内容方式：*@
<script>
    var vmind = document.getElementById("searchTxt");

    //    /*获取iframe中class为textLayer的div*/
    //this.textlayer = that.iframeWin.$('.textLayer')
    ///*获取鼠标在此iframe中的选中的文字*/
    //var selection_text = this.iframeWin.window.getSelection().toString();
    //————————————————
    //版权声明：本文为CSDN博主「沙雕在人间」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
    //原文链接：https://blog.csdn.net/simple_smile1208/article/details/119423065

    function content() {
        alert(tinymce.activeEditor.getContent());
    }
</script>


